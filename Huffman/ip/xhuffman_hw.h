// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

// AXILiteS
// 0x00000 : Control signals
//           bit 0  - ap_start (Read/Write/COH)
//           bit 1  - ap_done (Read/COR)
//           bit 2  - ap_idle (Read)
//           bit 3  - ap_ready (Read)
//           bit 7  - auto_restart (Read/Write)
//           others - reserved
// 0x00004 : Global Interrupt Enable Register
//           bit 0  - Global Interrupt Enable (Read/Write)
//           others - reserved
// 0x00008 : IP Interrupt Enable Register (Read/Write)
//           bit 0  - Channel 0 (ap_done)
//           bit 1  - Channel 1 (ap_ready)
//           others - reserved
// 0x0000c : IP Interrupt Status Register (Read/TOW)
//           bit 0  - Channel 0 (ap_done)
//           bit 1  - Channel 1 (ap_ready)
//           others - reserved
// 0x80000 : Data signal of c_size
//           bit 31~0 - c_size[31:0] (Read/Write)
// 0x80004 : reserved
// 0x80008 : Data signal of d_size
//           bit 31~0 - d_size[31:0] (Read)
// 0x8000c : Control signal of d_size
//           bit 0  - d_size_ap_vld (Read/COR)
//           others - reserved
// 0x00100 ~
// 0x001ff : Memory 'code_lengths' (64 * 8b)
//           Word n : bit [ 7: 0] - code_lengths[4n]
//                    bit [15: 8] - code_lengths[4n+1]
//                    bit [23:16] - code_lengths[4n+2]
//                    bit [31:24] - code_lengths[4n+3]
// 0x20000 ~
// 0x3ffff : Memory 'compressed' (25000 * 8b)
//           Word n : bit [ 7: 0] - compressed[4n]
//                    bit [15: 8] - compressed[4n+1]
//                    bit [23:16] - compressed[4n+2]
//                    bit [31:24] - compressed[4n+3]
// 0x40000 ~
// 0x7ffff : Memory 'decompressed' (37500 * 8b)
//           Word n : bit [ 7: 0] - decompressed[4n]
//                    bit [15: 8] - decompressed[4n+1]
//                    bit [23:16] - decompressed[4n+2]
//                    bit [31:24] - decompressed[4n+3]
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

#define XHUFFMAN_AXILITES_ADDR_AP_CTRL           0x00000
#define XHUFFMAN_AXILITES_ADDR_GIE               0x00004
#define XHUFFMAN_AXILITES_ADDR_IER               0x00008
#define XHUFFMAN_AXILITES_ADDR_ISR               0x0000c
#define XHUFFMAN_AXILITES_ADDR_C_SIZE_DATA       0x80000
#define XHUFFMAN_AXILITES_BITS_C_SIZE_DATA       32
#define XHUFFMAN_AXILITES_ADDR_D_SIZE_DATA       0x80008
#define XHUFFMAN_AXILITES_BITS_D_SIZE_DATA       32
#define XHUFFMAN_AXILITES_ADDR_D_SIZE_CTRL       0x8000c
#define XHUFFMAN_AXILITES_ADDR_CODE_LENGTHS_BASE 0x00100
#define XHUFFMAN_AXILITES_ADDR_CODE_LENGTHS_HIGH 0x001ff
#define XHUFFMAN_AXILITES_WIDTH_CODE_LENGTHS     8
#define XHUFFMAN_AXILITES_DEPTH_CODE_LENGTHS     64
#define XHUFFMAN_AXILITES_ADDR_COMPRESSED_BASE   0x20000
#define XHUFFMAN_AXILITES_ADDR_COMPRESSED_HIGH   0x3ffff
#define XHUFFMAN_AXILITES_WIDTH_COMPRESSED       8
#define XHUFFMAN_AXILITES_DEPTH_COMPRESSED       25000
#define XHUFFMAN_AXILITES_ADDR_DECOMPRESSED_BASE 0x40000
#define XHUFFMAN_AXILITES_ADDR_DECOMPRESSED_HIGH 0x7ffff
#define XHUFFMAN_AXILITES_WIDTH_DECOMPRESSED     8
#define XHUFFMAN_AXILITES_DEPTH_DECOMPRESSED     37500

