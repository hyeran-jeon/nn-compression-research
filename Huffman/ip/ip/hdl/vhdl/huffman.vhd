-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.1
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity huffman is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 20;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of huffman is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "huffman,hls_ip_2016_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.484500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=199,HLS_SYN_DSP=0,HLS_SYN_FF=1403,HLS_SYN_LUT=2533}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv18_249F0 : STD_LOGIC_VECTOR (17 downto 0) := "100100100111110000";
    constant ap_const_lv18_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_FFFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111110";
    constant ap_const_lv9_8 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_31 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal code_lengths_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal compressed_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal compressed_ce0 : STD_LOGIC;
    signal compressed_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal decompressed_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal decompressed_ce0 : STD_LOGIC;
    signal decompressed_we0 : STD_LOGIC;
    signal decompressed_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_size : STD_LOGIC_VECTOR (31 downto 0);
    signal d_size_ap_vld : STD_LOGIC;
    signal CodeTable_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal CodeTable_ce0 : STD_LOGIC;
    signal CodeTable_we0 : STD_LOGIC;
    signal CodeTable_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal CodeTable_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_size_read_reg_728 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_117 : BOOLEAN;
    signal i_1_fu_406_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal exitcond24_i_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_128 : BOOLEAN;
    signal i_2_fu_423_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_3_fu_441_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_139 : BOOLEAN;
    signal i_4_fu_458_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_4_reg_763 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_148 : BOOLEAN;
    signal tmp_i_fu_464_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_reg_768 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i1_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_469_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_800 : STD_LOGIC_VECTOR (31 downto 0);
    signal compressed_addr_1_reg_805 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_171 : BOOLEAN;
    signal tmp_7_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_818 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_index_1_fu_526_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_index_1_reg_825 : STD_LOGIC_VECTOR (31 downto 0);
    signal compressed_load_reg_830 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_187 : BOOLEAN;
    signal loop_limit_1_fu_583_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_limit_1_reg_835 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_196 : BOOLEAN;
    signal bits_1_fu_590_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_207 : BOOLEAN;
    signal i_6_fu_609_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_6_reg_854 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_216 : BOOLEAN;
    signal tmp_10_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_860 : STD_LOGIC_VECTOR (0 downto 0);
    signal accumulator_load_1_reg_864 : STD_LOGIC_VECTOR (31 downto 0);
    signal code_1_fu_645_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal code_1_reg_869 : STD_LOGIC_VECTOR (31 downto 0);
    signal tree_HuffmanCodes_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tree_HuffmanCodes_V_ce0 : STD_LOGIC;
    signal tree_HuffmanCodes_V_we0 : STD_LOGIC;
    signal tree_HuffmanCodes_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tree_HuffmanCodes_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tree_CodeLengths_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tree_CodeLengths_V_ce0 : STD_LOGIC;
    signal tree_CodeLengths_V_we0 : STD_LOGIC;
    signal tree_CodeLengths_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tree_CodeTable_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal tree_CodeTable_ce0 : STD_LOGIC;
    signal tree_CodeTable_we0 : STD_LOGIC;
    signal tree_CodeTable_d0 : STD_LOGIC_VECTOR (8 downto 0);
    signal tree_CodeTable_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_huffman_DecodeCodebook_fu_384_ap_start : STD_LOGIC;
    signal grp_huffman_DecodeCodebook_fu_384_ap_done : STD_LOGIC;
    signal grp_huffman_DecodeCodebook_fu_384_ap_idle : STD_LOGIC;
    signal grp_huffman_DecodeCodebook_fu_384_ap_ready : STD_LOGIC;
    signal grp_huffman_DecodeCodebook_fu_384_HuffmanTree_HuffmanCodes_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_huffman_DecodeCodebook_fu_384_HuffmanTree_HuffmanCodes_V_ce0 : STD_LOGIC;
    signal grp_huffman_DecodeCodebook_fu_384_HuffmanTree_HuffmanCodes_V_we0 : STD_LOGIC;
    signal grp_huffman_DecodeCodebook_fu_384_HuffmanTree_HuffmanCodes_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_huffman_DecodeCodebook_fu_384_HuffmanTree_CodeLengths_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_huffman_DecodeCodebook_fu_384_HuffmanTree_CodeLengths_V_ce0 : STD_LOGIC;
    signal grp_huffman_DecodeCodebook_fu_384_HuffmanTree_CodeLengths_V_we0 : STD_LOGIC;
    signal grp_huffman_DecodeCodebook_fu_384_HuffmanTree_CodeLengths_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_huffman_DecodeCodebook_fu_384_HuffmanTree_CodeTable_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_huffman_DecodeCodebook_fu_384_HuffmanTree_CodeTable_ce0 : STD_LOGIC;
    signal grp_huffman_DecodeCodebook_fu_384_HuffmanTree_CodeTable_we0 : STD_LOGIC;
    signal grp_huffman_DecodeCodebook_fu_384_HuffmanTree_CodeTable_d0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_huffman_DecodeCodebook_fu_384_code_lengths_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_huffman_DecodeCodebook_fu_384_code_lengths_ce0 : STD_LOGIC;
    signal grp_huffman_DecodeCodebook_fu_384_code_lengths_we0 : STD_LOGIC;
    signal grp_huffman_DecodeCodebook_fu_384_code_lengths_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_250 : STD_LOGIC_VECTOR (17 downto 0);
    signal i_0_i_reg_261 : STD_LOGIC_VECTOR (8 downto 0);
    signal i2_0_i_reg_272 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_i_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_i_reg_283 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_309 : BOOLEAN;
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_319 : BOOLEAN;
    signal bits_reg_294 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_index_reg_306 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_limit_reg_317 : STD_LOGIC_VECTOR (31 downto 0);
    signal bits_2_reg_329 : STD_LOGIC_VECTOR (31 downto 0);
    signal bits_2_be_phi_fu_365_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_339 : BOOLEAN;
    signal tmp_22_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal code_2_reg_340 : STD_LOGIC_VECTOR (31 downto 0);
    signal i2_0_in_reg_350 : STD_LOGIC_VECTOR (31 downto 0);
    signal bits_2_be_reg_361 : STD_LOGIC_VECTOR (31 downto 0);
    signal code_1_be_phi_fu_376_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal code_1_be_reg_373 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_grp_huffman_DecodeCodebook_fu_384_ap_start : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_368 : BOOLEAN;
    signal tmp_fu_412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_429_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_447_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_474_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_510_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_651_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_691_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal accumulator_fu_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulator_1_fu_565_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulator_5_fu_707_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal code_fu_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_index_fu_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_index_1_fu_685_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_680_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_index_2_fu_504_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_index_3_fu_520_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_534_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal num_cast_fu_545_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_fu_549_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal accumulator_2_fu_538_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_cast_fu_555_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulator_3_fu_559_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_pn_fu_572_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_pn_cast_fu_579_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_627_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_633_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_639_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_621_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i2_0_neg_le_fu_674_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_696_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumulator_4_fu_702_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);

    component huffman_DecodeCodebook IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        HuffmanTree_HuffmanCodes_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        HuffmanTree_HuffmanCodes_V_ce0 : OUT STD_LOGIC;
        HuffmanTree_HuffmanCodes_V_we0 : OUT STD_LOGIC;
        HuffmanTree_HuffmanCodes_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        HuffmanTree_HuffmanCodes_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        HuffmanTree_CodeLengths_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        HuffmanTree_CodeLengths_V_ce0 : OUT STD_LOGIC;
        HuffmanTree_CodeLengths_V_we0 : OUT STD_LOGIC;
        HuffmanTree_CodeLengths_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        HuffmanTree_CodeTable_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        HuffmanTree_CodeTable_ce0 : OUT STD_LOGIC;
        HuffmanTree_CodeTable_we0 : OUT STD_LOGIC;
        HuffmanTree_CodeTable_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        code_lengths_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        code_lengths_ce0 : OUT STD_LOGIC;
        code_lengths_we0 : OUT STD_LOGIC;
        code_lengths_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        code_lengths_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component huffman_CodeTable IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component huffman_tree_HuffmanCodes_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component huffman_tree_CodeLengths_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component huffman_tree_CodeTable IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (8 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component huffman_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        code_lengths_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        code_lengths_ce0 : IN STD_LOGIC;
        code_lengths_we0 : IN STD_LOGIC;
        code_lengths_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        code_lengths_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        compressed_address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        compressed_ce0 : IN STD_LOGIC;
        compressed_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        decompressed_address0 : IN STD_LOGIC_VECTOR (17 downto 0);
        decompressed_ce0 : IN STD_LOGIC;
        decompressed_we0 : IN STD_LOGIC;
        decompressed_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        c_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        d_size : IN STD_LOGIC_VECTOR (31 downto 0);
        d_size_ap_vld : IN STD_LOGIC );
    end component;



begin
    CodeTable_U : component huffman_CodeTable
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => CodeTable_address0,
        ce0 => CodeTable_ce0,
        we0 => CodeTable_we0,
        d0 => CodeTable_d0,
        q0 => CodeTable_q0);

    huffman_AXILiteS_s_axi_U : component huffman_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        code_lengths_address0 => grp_huffman_DecodeCodebook_fu_384_code_lengths_address0,
        code_lengths_ce0 => grp_huffman_DecodeCodebook_fu_384_code_lengths_ce0,
        code_lengths_we0 => grp_huffman_DecodeCodebook_fu_384_code_lengths_we0,
        code_lengths_d0 => grp_huffman_DecodeCodebook_fu_384_code_lengths_d0,
        code_lengths_q0 => code_lengths_q0,
        compressed_address0 => compressed_address0,
        compressed_ce0 => compressed_ce0,
        compressed_q0 => compressed_q0,
        decompressed_address0 => decompressed_address0,
        decompressed_ce0 => decompressed_ce0,
        decompressed_we0 => decompressed_we0,
        decompressed_d0 => decompressed_d0,
        c_size => c_size,
        d_size => out_index_fu_130,
        d_size_ap_vld => d_size_ap_vld);

    tree_HuffmanCodes_V_U : component huffman_tree_HuffmanCodes_V
    generic map (
        DataWidth => 16,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => tree_HuffmanCodes_V_address0,
        ce0 => tree_HuffmanCodes_V_ce0,
        we0 => tree_HuffmanCodes_V_we0,
        d0 => tree_HuffmanCodes_V_d0,
        q0 => tree_HuffmanCodes_V_q0);

    tree_CodeLengths_V_U : component huffman_tree_CodeLengths_V
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => tree_CodeLengths_V_address0,
        ce0 => tree_CodeLengths_V_ce0,
        we0 => tree_CodeLengths_V_we0,
        d0 => tree_CodeLengths_V_d0);

    tree_CodeTable_U : component huffman_tree_CodeTable
    generic map (
        DataWidth => 9,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => tree_CodeTable_address0,
        ce0 => tree_CodeTable_ce0,
        we0 => tree_CodeTable_we0,
        d0 => tree_CodeTable_d0,
        q0 => tree_CodeTable_q0);

    grp_huffman_DecodeCodebook_fu_384 : component huffman_DecodeCodebook
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_huffman_DecodeCodebook_fu_384_ap_start,
        ap_done => grp_huffman_DecodeCodebook_fu_384_ap_done,
        ap_idle => grp_huffman_DecodeCodebook_fu_384_ap_idle,
        ap_ready => grp_huffman_DecodeCodebook_fu_384_ap_ready,
        HuffmanTree_HuffmanCodes_V_address0 => grp_huffman_DecodeCodebook_fu_384_HuffmanTree_HuffmanCodes_V_address0,
        HuffmanTree_HuffmanCodes_V_ce0 => grp_huffman_DecodeCodebook_fu_384_HuffmanTree_HuffmanCodes_V_ce0,
        HuffmanTree_HuffmanCodes_V_we0 => grp_huffman_DecodeCodebook_fu_384_HuffmanTree_HuffmanCodes_V_we0,
        HuffmanTree_HuffmanCodes_V_d0 => grp_huffman_DecodeCodebook_fu_384_HuffmanTree_HuffmanCodes_V_d0,
        HuffmanTree_HuffmanCodes_V_q0 => tree_HuffmanCodes_V_q0,
        HuffmanTree_CodeLengths_V_address0 => grp_huffman_DecodeCodebook_fu_384_HuffmanTree_CodeLengths_V_address0,
        HuffmanTree_CodeLengths_V_ce0 => grp_huffman_DecodeCodebook_fu_384_HuffmanTree_CodeLengths_V_ce0,
        HuffmanTree_CodeLengths_V_we0 => grp_huffman_DecodeCodebook_fu_384_HuffmanTree_CodeLengths_V_we0,
        HuffmanTree_CodeLengths_V_d0 => grp_huffman_DecodeCodebook_fu_384_HuffmanTree_CodeLengths_V_d0,
        HuffmanTree_CodeTable_address0 => grp_huffman_DecodeCodebook_fu_384_HuffmanTree_CodeTable_address0,
        HuffmanTree_CodeTable_ce0 => grp_huffman_DecodeCodebook_fu_384_HuffmanTree_CodeTable_ce0,
        HuffmanTree_CodeTable_we0 => grp_huffman_DecodeCodebook_fu_384_HuffmanTree_CodeTable_we0,
        HuffmanTree_CodeTable_d0 => grp_huffman_DecodeCodebook_fu_384_HuffmanTree_CodeTable_d0,
        code_lengths_address0 => grp_huffman_DecodeCodebook_fu_384_code_lengths_address0,
        code_lengths_ce0 => grp_huffman_DecodeCodebook_fu_384_code_lengths_ce0,
        code_lengths_we0 => grp_huffman_DecodeCodebook_fu_384_code_lengths_we0,
        code_lengths_d0 => grp_huffman_DecodeCodebook_fu_384_code_lengths_d0,
        code_lengths_q0 => code_lengths_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_huffman_DecodeCodebook_fu_384_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_huffman_DecodeCodebook_fu_384_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                    ap_reg_grp_huffman_DecodeCodebook_fu_384_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_huffman_DecodeCodebook_fu_384_ap_ready)) then 
                    ap_reg_grp_huffman_DecodeCodebook_fu_384_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    accumulator_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and (ap_const_lv1_0 = tmp_22_fu_668_p2) and not((ap_const_lv1_0 = tmp_10_reg_860)))) then 
                accumulator_fu_122 <= accumulator_5_fu_707_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
                accumulator_fu_122 <= accumulator_1_fu_565_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((exitcond_i1_fu_452_p2 = ap_const_lv1_0)))) then 
                accumulator_fu_122 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    bits_2_be_reg_361_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and (ap_const_lv1_0 = tmp_10_fu_615_p2))) then 
                bits_2_be_reg_361 <= bits_2_reg_329;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and (ap_const_lv1_0 = tmp_22_fu_668_p2) and not((ap_const_lv1_0 = tmp_10_reg_860)))) then 
                bits_2_be_reg_361 <= i_6_reg_854;
            end if; 
        end if;
    end process;

    bits_2_reg_329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and ((ap_const_lv1_0 = tmp_10_reg_860) or (ap_const_lv1_0 = tmp_22_fu_668_p2)))) then 
                bits_2_reg_329 <= bits_2_be_phi_fu_365_p4;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
                bits_2_reg_329 <= bits_1_fu_590_p2;
            end if; 
        end if;
    end process;

    bits_reg_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and not((ap_const_lv1_0 = tmp_9_fu_604_p2)))) then 
                bits_reg_294 <= bits_2_reg_329;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((exitcond_i1_fu_452_p2 = ap_const_lv1_0)))) then 
                bits_reg_294 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    code_1_be_reg_373_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and (ap_const_lv1_0 = tmp_10_fu_615_p2))) then 
                code_1_be_reg_373 <= code_2_reg_340;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and (ap_const_lv1_0 = tmp_22_fu_668_p2) and not((ap_const_lv1_0 = tmp_10_reg_860)))) then 
                code_1_be_reg_373 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    code_2_reg_340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and (ap_const_lv1_0 = tmp_9_fu_604_p2))) then 
                code_2_reg_340 <= code_fu_126;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and not((ap_const_lv1_0 = tmp_10_reg_860)) and not((ap_const_lv1_0 = tmp_22_fu_668_p2)))) then 
                code_2_reg_340 <= code_1_reg_869;
            end if; 
        end if;
    end process;

    code_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and ((ap_const_lv1_0 = tmp_10_reg_860) or (ap_const_lv1_0 = tmp_22_fu_668_p2)))) then 
                code_fu_126 <= code_1_be_phi_fu_376_p4;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((exitcond_i1_fu_452_p2 = ap_const_lv1_0)))) then 
                code_fu_126 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i2_0_i_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond24_i_fu_417_p2 = ap_const_lv1_0)))) then 
                i2_0_i_reg_272 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond_i_fu_435_p2))) then 
                i2_0_i_reg_272 <= i_3_fu_441_p2;
            end if; 
        end if;
    end process;

    i2_0_in_reg_350_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and (ap_const_lv1_0 = tmp_9_fu_604_p2))) then 
                i2_0_in_reg_350 <= bits_2_reg_329;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and not((ap_const_lv1_0 = tmp_10_reg_860)) and not((ap_const_lv1_0 = tmp_22_fu_668_p2)))) then 
                i2_0_in_reg_350 <= i_6_reg_854;
            end if; 
        end if;
    end process;

    i_0_i_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond3_fu_400_p2 = ap_const_lv1_0)))) then 
                i_0_i_reg_261 <= ap_const_lv9_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond24_i_fu_417_p2 = ap_const_lv1_0))) then 
                i_0_i_reg_261 <= i_2_fu_423_p2;
            end if; 
        end if;
    end process;

    i_i_reg_283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
                i_i_reg_283 <= i_4_reg_763;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_logic_0 = grp_huffman_DecodeCodebook_fu_384_ap_done)))) then 
                i_i_reg_283 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond3_fu_400_p2 = ap_const_lv1_0))) then 
                i_reg_250 <= i_1_fu_406_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_250 <= ap_const_lv18_0;
            end if; 
        end if;
    end process;

    in_index_reg_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and not((ap_const_lv1_0 = tmp_9_fu_604_p2)))) then 
                in_index_reg_306 <= in_index_1_reg_825;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((exitcond_i1_fu_452_p2 = ap_const_lv1_0)))) then 
                in_index_reg_306 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    loop_limit_reg_317_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and not((ap_const_lv1_0 = tmp_9_fu_604_p2)))) then 
                loop_limit_reg_317 <= loop_limit_1_reg_835;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((exitcond_i1_fu_452_p2 = ap_const_lv1_0)))) then 
                loop_limit_reg_317 <= ap_const_lv32_9;
            end if; 
        end if;
    end process;

    out_index_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and (ap_const_lv1_0 = tmp_22_fu_668_p2) and not((ap_const_lv1_0 = tmp_10_reg_860)))) then 
                out_index_fu_130 <= out_index_1_fu_685_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((exitcond_i1_fu_452_p2 = ap_const_lv1_0)))) then 
                out_index_fu_130 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and not((ap_const_lv1_0 = tmp_10_fu_615_p2)))) then
                accumulator_load_1_reg_864 <= accumulator_fu_122;
                code_1_reg_869 <= code_1_fu_645_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                c_size_read_reg_728 <= c_size;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((exitcond_i1_fu_452_p2 = ap_const_lv1_0)))) then
                compressed_addr_1_reg_805 <= tmp_5_fu_474_p1(17 - 1 downto 0);
                tmp_6_reg_800 <= tmp_6_fu_469_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then
                compressed_load_reg_830 <= compressed_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                i_4_reg_763 <= i_4_fu_458_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then
                i_6_reg_854 <= i_6_fu_609_p2;
                tmp_10_reg_860 <= tmp_10_fu_615_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and not((ap_const_lv1_0 = tmp_7_fu_499_p2)))) then
                in_index_1_reg_825 <= in_index_1_fu_526_p3;
                tmp_3_reg_818 <= tmp_3_fu_515_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then
                loop_limit_1_reg_835 <= loop_limit_1_fu_583_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (exitcond_i1_fu_452_p2 = ap_const_lv1_0))) then
                    tmp_i_reg_768(9 downto 0) <= tmp_i_fu_464_p1(9 downto 0);
            end if;
        end if;
    end process;
    tmp_i_reg_768(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond3_fu_400_p2, exitcond24_i_fu_417_p2, exitcond_i1_fu_452_p2, tmp_7_fu_499_p2, tmp_10_reg_860, grp_huffman_DecodeCodebook_fu_384_ap_done, exitcond_i_fu_435_p2, tmp_9_fu_604_p2, tmp_22_fu_668_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((exitcond3_fu_400_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((exitcond24_i_fu_417_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                if ((ap_const_lv1_0 = exitcond_i_fu_435_p2)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                if (not((ap_const_logic_0 = grp_huffman_DecodeCodebook_fu_384_ap_done))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st7_fsm_6 => 
                if (not((exitcond_i1_fu_452_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st9_fsm_8 => 
                if ((ap_const_lv1_0 = tmp_7_fu_499_p2)) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                end if;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                if ((ap_const_lv1_0 = tmp_9_fu_604_p2)) then
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                if (((ap_const_lv1_0 = tmp_10_reg_860) or (ap_const_lv1_0 = tmp_22_fu_668_p2))) then
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                else
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;

    CodeTable_address0_assign_proc : process(tmp_i_reg_768, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st8_fsm_7, tmp_15_fu_651_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            CodeTable_address0 <= tmp_i_reg_768(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            CodeTable_address0 <= tmp_15_fu_651_p1(9 - 1 downto 0);
        else 
            CodeTable_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    CodeTable_ce0_assign_proc : process(ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7))) then 
            CodeTable_ce0 <= ap_const_logic_1;
        else 
            CodeTable_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    CodeTable_d0 <= std_logic_vector(resize(unsigned(tree_CodeTable_q0),32));

    CodeTable_we0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7))) then 
            CodeTable_we0 <= ap_const_logic_1;
        else 
            CodeTable_we0 <= ap_const_logic_0;
        end if; 
    end process;

    accumulator_1_fu_565_p3 <= 
        accumulator_3_fu_559_p2 when (tmp_3_reg_818(0) = '1') else 
        accumulator_2_fu_538_p3;
    accumulator_2_fu_538_p3 <= (tmp_16_fu_534_p1 & compressed_load_reg_830);
    accumulator_3_fu_559_p2 <= std_logic_vector(shift_right(signed(accumulator_2_fu_538_p3),to_integer(unsigned('0' & tmp_8_cast_fu_555_p1(31-1 downto 0)))));
    accumulator_4_fu_702_p2 <= std_logic_vector(shift_left(unsigned(accumulator_load_1_reg_864),to_integer(unsigned('0' & tmp_20_fu_696_p2(31-1 downto 0)))));
    accumulator_5_fu_707_p2 <= std_logic_vector(shift_right(signed(accumulator_4_fu_702_p2),to_integer(unsigned('0' & tmp_20_fu_696_p2(31-1 downto 0)))));

    ap_done_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8, tmp_7_fu_499_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (ap_const_lv1_0 = tmp_7_fu_499_p2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8, tmp_7_fu_499_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (ap_const_lv1_0 = tmp_7_fu_499_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_117_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_117 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_128_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_128 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_139_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_139 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_148_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_148 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_171_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_171 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_187_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_187 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_196_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_196 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    ap_sig_207_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_207 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    ap_sig_216_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_216 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    ap_sig_309_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_309 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_31_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_31 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_319_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_319 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_339_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_339 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    ap_sig_368_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_368 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_187)
    begin
        if (ap_sig_187) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_196)
    begin
        if (ap_sig_196) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_207)
    begin
        if (ap_sig_207) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_216)
    begin
        if (ap_sig_216) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_339)
    begin
        if (ap_sig_339) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_31)
    begin
        if (ap_sig_31) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_117)
    begin
        if (ap_sig_117) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_128)
    begin
        if (ap_sig_128) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_139)
    begin
        if (ap_sig_139) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_368)
    begin
        if (ap_sig_368) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_309)
    begin
        if (ap_sig_309) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_148)
    begin
        if (ap_sig_148) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_319)
    begin
        if (ap_sig_319) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_171)
    begin
        if (ap_sig_171) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    bits_1_fu_590_p2 <= std_logic_vector(unsigned(bits_reg_294) + unsigned(p_pn_cast_fu_579_p1));

    bits_2_be_phi_fu_365_p4_assign_proc : process(i_6_reg_854, tmp_10_reg_860, ap_sig_cseq_ST_st14_fsm_13, tmp_22_fu_668_p2, bits_2_be_reg_361)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and (ap_const_lv1_0 = tmp_22_fu_668_p2) and not((ap_const_lv1_0 = tmp_10_reg_860)))) then 
            bits_2_be_phi_fu_365_p4 <= i_6_reg_854;
        else 
            bits_2_be_phi_fu_365_p4 <= bits_2_be_reg_361;
        end if; 
    end process;


    code_1_be_phi_fu_376_p4_assign_proc : process(tmp_10_reg_860, ap_sig_cseq_ST_st14_fsm_13, tmp_22_fu_668_p2, code_1_be_reg_373)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and (ap_const_lv1_0 = tmp_22_fu_668_p2) and not((ap_const_lv1_0 = tmp_10_reg_860)))) then 
            code_1_be_phi_fu_376_p4 <= ap_const_lv32_0;
        else 
            code_1_be_phi_fu_376_p4 <= code_1_be_reg_373;
        end if; 
    end process;

    code_1_fu_645_p2 <= (tmp_14_fu_639_p2 or tmp_17_fu_621_p2);

    compressed_address0_assign_proc : process(compressed_addr_1_reg_805, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st10_fsm_9, tmp_s_fu_510_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            compressed_address0 <= compressed_addr_1_reg_805;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            compressed_address0 <= tmp_s_fu_510_p1(17 - 1 downto 0);
        else 
            compressed_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    compressed_ce0_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9))) then 
            compressed_ce0 <= ap_const_logic_1;
        else 
            compressed_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    d_size_ap_vld_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8, tmp_7_fu_499_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (ap_const_lv1_0 = tmp_7_fu_499_p2))) then 
            d_size_ap_vld <= ap_const_logic_1;
        else 
            d_size_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    decompressed_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st14_fsm_13, tmp_fu_412_p1, tmp_19_fu_691_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            decompressed_address0 <= tmp_19_fu_691_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            decompressed_address0 <= tmp_fu_412_p1(18 - 1 downto 0);
        else 
            decompressed_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    decompressed_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            decompressed_ce0 <= ap_const_logic_1;
        else 
            decompressed_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    decompressed_d0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st14_fsm_13, tmp_23_fu_680_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            decompressed_d0 <= tmp_23_fu_680_p1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            decompressed_d0 <= ap_const_lv8_0;
        else 
            decompressed_d0 <= "XXXXXXXX";
        end if; 
    end process;


    decompressed_we0_assign_proc : process(exitcond3_fu_400_p2, ap_sig_cseq_ST_st2_fsm_1, tmp_10_reg_860, ap_sig_cseq_ST_st14_fsm_13, tmp_22_fu_668_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond3_fu_400_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and (ap_const_lv1_0 = tmp_22_fu_668_p2) and not((ap_const_lv1_0 = tmp_10_reg_860))))) then 
            decompressed_we0 <= ap_const_logic_1;
        else 
            decompressed_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond24_i_fu_417_p2 <= "1" when (i_0_i_reg_261 = ap_const_lv9_100) else "0";
    exitcond3_fu_400_p2 <= "1" when (i_reg_250 = ap_const_lv18_249F0) else "0";
    exitcond_i1_fu_452_p2 <= "1" when (i_i_reg_283 = ap_const_lv10_200) else "0";
    exitcond_i_fu_435_p2 <= "1" when (i2_0_i_reg_272 = ap_const_lv10_200) else "0";
    grp_huffman_DecodeCodebook_fu_384_ap_start <= ap_reg_grp_huffman_DecodeCodebook_fu_384_ap_start;
    i2_0_neg_le_fu_674_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) - unsigned(i2_0_in_reg_350));
    i_1_fu_406_p2 <= std_logic_vector(unsigned(i_reg_250) + unsigned(ap_const_lv18_1));
    i_2_fu_423_p2 <= std_logic_vector(unsigned(i_0_i_reg_261) + unsigned(ap_const_lv9_1));
    i_3_fu_441_p2 <= std_logic_vector(unsigned(i2_0_i_reg_272) + unsigned(ap_const_lv10_1));
    i_4_fu_458_p2 <= std_logic_vector(unsigned(i_i_reg_283) + unsigned(ap_const_lv10_1));
    i_6_fu_609_p2 <= std_logic_vector(unsigned(i2_0_in_reg_350) + unsigned(ap_const_lv32_FFFFFFFF));
    in_index_1_fu_526_p3 <= 
        in_index_3_fu_520_p2 when (tmp_3_fu_515_p2(0) = '1') else 
        in_index_2_fu_504_p2;
    in_index_2_fu_504_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(in_index_reg_306));
    in_index_3_fu_520_p2 <= std_logic_vector(unsigned(ap_const_lv32_3) + unsigned(in_index_reg_306));
    loop_limit_1_fu_583_p3 <= 
        ap_const_lv32_1 when (tmp_3_reg_818(0) = '1') else 
        loop_limit_reg_317;
    num_cast_fu_545_p1 <= std_logic_vector(resize(unsigned(compressed_q0),9));
    out_index_1_fu_685_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(out_index_fu_130));
    p_pn_cast_fu_579_p1 <= std_logic_vector(resize(unsigned(p_pn_fu_572_p3),32));
    p_pn_fu_572_p3 <= 
        compressed_q0 when (tmp_3_reg_818(0) = '1') else 
        ap_const_lv8_8;
    tmp_10_fu_615_p2 <= "1" when (signed(i2_0_in_reg_350) > signed(ap_const_lv32_0)) else "0";
    tmp_12_fu_627_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & i_6_fu_609_p2(31-1 downto 0)))));
    tmp_13_fu_633_p2 <= (tmp_12_fu_627_p2 and accumulator_fu_122);
    tmp_14_fu_639_p2 <= std_logic_vector(shift_right(signed(tmp_13_fu_633_p2),to_integer(unsigned('0' & i_6_fu_609_p2(31-1 downto 0)))));
        tmp_15_fu_651_p1 <= std_logic_vector(resize(signed(code_1_fu_645_p2),64));

    tmp_16_fu_534_p1 <= accumulator_fu_122(24 - 1 downto 0);
    tmp_17_fu_621_p2 <= std_logic_vector(shift_left(unsigned(code_2_reg_340),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    tmp_18_fu_656_p2 <= "1" when (CodeTable_q0 = ap_const_lv32_FFFFFFFF) else "0";
        tmp_19_fu_691_p1 <= std_logic_vector(resize(signed(out_index_fu_130),64));

    tmp_20_fu_696_p2 <= std_logic_vector(unsigned(ap_const_lv32_1F) + unsigned(i2_0_neg_le_fu_674_p2));
    tmp_21_fu_662_p2 <= "1" when (CodeTable_q0 = ap_const_lv32_1FF) else "0";
    tmp_22_fu_668_p2 <= (tmp_21_fu_662_p2 or tmp_18_fu_656_p2);
    tmp_23_fu_680_p1 <= CodeTable_q0(8 - 1 downto 0);
    tmp_2_fu_429_p1 <= std_logic_vector(resize(unsigned(i_0_i_reg_261),64));
    tmp_3_fu_515_p2 <= "1" when (in_index_2_fu_504_p2 = tmp_6_reg_800) else "0";
    tmp_4_fu_447_p1 <= std_logic_vector(resize(unsigned(i2_0_i_reg_272),64));
        tmp_5_fu_474_p1 <= std_logic_vector(resize(signed(tmp_6_fu_469_p2),64));

    tmp_6_fu_469_p2 <= std_logic_vector(unsigned(c_size_read_reg_728) + unsigned(ap_const_lv32_FFFFFFFE));
    tmp_7_fu_499_p2 <= "1" when (signed(in_index_reg_306) < signed(c_size_read_reg_728)) else "0";
        tmp_8_cast_fu_555_p1 <= std_logic_vector(resize(signed(tmp_8_fu_549_p2),32));

    tmp_8_fu_549_p2 <= std_logic_vector(unsigned(ap_const_lv9_8) - unsigned(num_cast_fu_545_p1));
    tmp_9_fu_604_p2 <= "1" when (signed(bits_2_reg_329) < signed(loop_limit_1_reg_835)) else "0";
    tmp_fu_412_p1 <= std_logic_vector(resize(unsigned(i_reg_250),64));
    tmp_i_fu_464_p1 <= std_logic_vector(resize(unsigned(i_i_reg_283),64));
        tmp_s_fu_510_p1 <= std_logic_vector(resize(signed(in_index_reg_306),64));


    tree_CodeLengths_V_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, grp_huffman_DecodeCodebook_fu_384_HuffmanTree_CodeLengths_V_address0, ap_sig_cseq_ST_st6_fsm_5, tmp_2_fu_429_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            tree_CodeLengths_V_address0 <= tmp_2_fu_429_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            tree_CodeLengths_V_address0 <= grp_huffman_DecodeCodebook_fu_384_HuffmanTree_CodeLengths_V_address0;
        else 
            tree_CodeLengths_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    tree_CodeLengths_V_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, grp_huffman_DecodeCodebook_fu_384_HuffmanTree_CodeLengths_V_ce0, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            tree_CodeLengths_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            tree_CodeLengths_V_ce0 <= grp_huffman_DecodeCodebook_fu_384_HuffmanTree_CodeLengths_V_ce0;
        else 
            tree_CodeLengths_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tree_CodeLengths_V_d0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, grp_huffman_DecodeCodebook_fu_384_HuffmanTree_CodeLengths_V_d0, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            tree_CodeLengths_V_d0 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            tree_CodeLengths_V_d0 <= grp_huffman_DecodeCodebook_fu_384_HuffmanTree_CodeLengths_V_d0;
        else 
            tree_CodeLengths_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    tree_CodeLengths_V_we0_assign_proc : process(exitcond24_i_fu_417_p2, ap_sig_cseq_ST_st3_fsm_2, grp_huffman_DecodeCodebook_fu_384_HuffmanTree_CodeLengths_V_we0, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond24_i_fu_417_p2 = ap_const_lv1_0)))) then 
            tree_CodeLengths_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            tree_CodeLengths_V_we0 <= grp_huffman_DecodeCodebook_fu_384_HuffmanTree_CodeLengths_V_we0;
        else 
            tree_CodeLengths_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tree_CodeTable_address0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st7_fsm_6, tmp_i_fu_464_p1, grp_huffman_DecodeCodebook_fu_384_HuffmanTree_CodeTable_address0, ap_sig_cseq_ST_st6_fsm_5, tmp_4_fu_447_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            tree_CodeTable_address0 <= tmp_4_fu_447_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            tree_CodeTable_address0 <= tmp_i_fu_464_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            tree_CodeTable_address0 <= grp_huffman_DecodeCodebook_fu_384_HuffmanTree_CodeTable_address0;
        else 
            tree_CodeTable_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    tree_CodeTable_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st7_fsm_6, grp_huffman_DecodeCodebook_fu_384_HuffmanTree_CodeTable_ce0, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            tree_CodeTable_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            tree_CodeTable_ce0 <= grp_huffman_DecodeCodebook_fu_384_HuffmanTree_CodeTable_ce0;
        else 
            tree_CodeTable_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tree_CodeTable_d0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, grp_huffman_DecodeCodebook_fu_384_HuffmanTree_CodeTable_d0, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            tree_CodeTable_d0 <= ap_const_lv9_1FF;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            tree_CodeTable_d0 <= grp_huffman_DecodeCodebook_fu_384_HuffmanTree_CodeTable_d0;
        else 
            tree_CodeTable_d0 <= "XXXXXXXXX";
        end if; 
    end process;


    tree_CodeTable_we0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, grp_huffman_DecodeCodebook_fu_384_HuffmanTree_CodeTable_we0, exitcond_i_fu_435_p2, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond_i_fu_435_p2)))) then 
            tree_CodeTable_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            tree_CodeTable_we0 <= grp_huffman_DecodeCodebook_fu_384_HuffmanTree_CodeTable_we0;
        else 
            tree_CodeTable_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tree_HuffmanCodes_V_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, grp_huffman_DecodeCodebook_fu_384_HuffmanTree_HuffmanCodes_V_address0, ap_sig_cseq_ST_st6_fsm_5, tmp_2_fu_429_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            tree_HuffmanCodes_V_address0 <= tmp_2_fu_429_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            tree_HuffmanCodes_V_address0 <= grp_huffman_DecodeCodebook_fu_384_HuffmanTree_HuffmanCodes_V_address0;
        else 
            tree_HuffmanCodes_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    tree_HuffmanCodes_V_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, grp_huffman_DecodeCodebook_fu_384_HuffmanTree_HuffmanCodes_V_ce0, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            tree_HuffmanCodes_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            tree_HuffmanCodes_V_ce0 <= grp_huffman_DecodeCodebook_fu_384_HuffmanTree_HuffmanCodes_V_ce0;
        else 
            tree_HuffmanCodes_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tree_HuffmanCodes_V_d0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, grp_huffman_DecodeCodebook_fu_384_HuffmanTree_HuffmanCodes_V_d0, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            tree_HuffmanCodes_V_d0 <= ap_const_lv16_FFFF;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            tree_HuffmanCodes_V_d0 <= grp_huffman_DecodeCodebook_fu_384_HuffmanTree_HuffmanCodes_V_d0;
        else 
            tree_HuffmanCodes_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    tree_HuffmanCodes_V_we0_assign_proc : process(exitcond24_i_fu_417_p2, ap_sig_cseq_ST_st3_fsm_2, grp_huffman_DecodeCodebook_fu_384_HuffmanTree_HuffmanCodes_V_we0, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond24_i_fu_417_p2 = ap_const_lv1_0)))) then 
            tree_HuffmanCodes_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            tree_HuffmanCodes_V_we0 <= grp_huffman_DecodeCodebook_fu_384_HuffmanTree_HuffmanCodes_V_we0;
        else 
            tree_HuffmanCodes_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
