// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1ns/1ps
module huffman_AXILiteS_s_axi
#(parameter
    C_S_AXI_ADDR_WIDTH = 20,
    C_S_AXI_DATA_WIDTH = 32
)(
    // axi4 lite slave signals
    input  wire                          ACLK,
    input  wire                          ARESET,
    input  wire                          ACLK_EN,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] AWADDR,
    input  wire                          AWVALID,
    output wire                          AWREADY,
    input  wire [C_S_AXI_DATA_WIDTH-1:0] WDATA,
    input  wire [C_S_AXI_DATA_WIDTH/8-1:0] WSTRB,
    input  wire                          WVALID,
    output wire                          WREADY,
    output wire [1:0]                    BRESP,
    output wire                          BVALID,
    input  wire                          BREADY,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] ARADDR,
    input  wire                          ARVALID,
    output wire                          ARREADY,
    output wire [C_S_AXI_DATA_WIDTH-1:0] RDATA,
    output wire [1:0]                    RRESP,
    output wire                          RVALID,
    input  wire                          RREADY,
    output wire                          interrupt,
    // user signals
    output wire                          ap_start,
    input  wire                          ap_done,
    input  wire                          ap_ready,
    input  wire                          ap_idle,
    input  wire [7:0]                    code_lengths_address0,
    input  wire                          code_lengths_ce0,
    input  wire                          code_lengths_we0,
    input  wire [7:0]                    code_lengths_d0,
    output wire [7:0]                    code_lengths_q0,
    input  wire [16:0]                   compressed_address0,
    input  wire                          compressed_ce0,
    output wire [7:0]                    compressed_q0,
    input  wire [17:0]                   decompressed_address0,
    input  wire                          decompressed_ce0,
    input  wire                          decompressed_we0,
    input  wire [7:0]                    decompressed_d0,
    output wire [31:0]                   c_size,
    input  wire [31:0]                   d_size,
    input  wire                          d_size_ap_vld
);
//------------------------Address Info-------------------
// 0x00000 : Control signals
//           bit 0  - ap_start (Read/Write/COH)
//           bit 1  - ap_done (Read/COR)
//           bit 2  - ap_idle (Read)
//           bit 3  - ap_ready (Read)
//           bit 7  - auto_restart (Read/Write)
//           others - reserved
// 0x00004 : Global Interrupt Enable Register
//           bit 0  - Global Interrupt Enable (Read/Write)
//           others - reserved
// 0x00008 : IP Interrupt Enable Register (Read/Write)
//           bit 0  - Channel 0 (ap_done)
//           bit 1  - Channel 1 (ap_ready)
//           others - reserved
// 0x0000c : IP Interrupt Status Register (Read/TOW)
//           bit 0  - Channel 0 (ap_done)
//           bit 1  - Channel 1 (ap_ready)
//           others - reserved
// 0x80000 : Data signal of c_size
//           bit 31~0 - c_size[31:0] (Read/Write)
// 0x80004 : reserved
// 0x80008 : Data signal of d_size
//           bit 31~0 - d_size[31:0] (Read)
// 0x8000c : Control signal of d_size
//           bit 0  - d_size_ap_vld (Read/COR)
//           others - reserved
// 0x00100 ~
// 0x001ff : Memory 'code_lengths' (64 * 8b)
//           Word n : bit [ 7: 0] - code_lengths[4n]
//                    bit [15: 8] - code_lengths[4n+1]
//                    bit [23:16] - code_lengths[4n+2]
//                    bit [31:24] - code_lengths[4n+3]
// 0x20000 ~
// 0x3ffff : Memory 'compressed' (25000 * 8b)
//           Word n : bit [ 7: 0] - compressed[4n]
//                    bit [15: 8] - compressed[4n+1]
//                    bit [23:16] - compressed[4n+2]
//                    bit [31:24] - compressed[4n+3]
// 0x40000 ~
// 0x7ffff : Memory 'decompressed' (37500 * 8b)
//           Word n : bit [ 7: 0] - decompressed[4n]
//                    bit [15: 8] - decompressed[4n+1]
//                    bit [23:16] - decompressed[4n+2]
//                    bit [31:24] - decompressed[4n+3]
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

//------------------------Parameter----------------------
localparam
    ADDR_AP_CTRL           = 20'h00000,
    ADDR_GIE               = 20'h00004,
    ADDR_IER               = 20'h00008,
    ADDR_ISR               = 20'h0000c,
    ADDR_C_SIZE_DATA_0     = 20'h80000,
    ADDR_C_SIZE_CTRL       = 20'h80004,
    ADDR_D_SIZE_DATA_0     = 20'h80008,
    ADDR_D_SIZE_CTRL       = 20'h8000c,
    ADDR_CODE_LENGTHS_BASE = 20'h00100,
    ADDR_CODE_LENGTHS_HIGH = 20'h001ff,
    ADDR_COMPRESSED_BASE   = 20'h20000,
    ADDR_COMPRESSED_HIGH   = 20'h3ffff,
    ADDR_DECOMPRESSED_BASE = 20'h40000,
    ADDR_DECOMPRESSED_HIGH = 20'h7ffff,
    WRIDLE                 = 2'd0,
    WRDATA                 = 2'd1,
    WRRESP                 = 2'd2,
    RDIDLE                 = 2'd0,
    RDDATA                 = 2'd1,
    ADDR_BITS         = 20;

//------------------------Local signal-------------------
    reg  [1:0]                    wstate;
    reg  [1:0]                    wnext;
    reg  [ADDR_BITS-1:0]          waddr;
    wire [31:0]                   wmask;
    wire                          aw_hs;
    wire                          w_hs;
    reg  [1:0]                    rstate;
    reg  [1:0]                    rnext;
    reg  [31:0]                   rdata;
    wire                          ar_hs;
    wire [ADDR_BITS-1:0]          raddr;
    // internal registers
    wire                          int_ap_idle;
    wire                          int_ap_ready;
    reg                           int_ap_done;
    reg                           int_ap_start;
    reg                           int_auto_restart;
    reg                           int_gie;
    reg  [1:0]                    int_ier;
    reg  [1:0]                    int_isr;
    reg  [31:0]                   int_c_size;
    reg  [31:0]                   int_d_size;
    reg                           int_d_size_ap_vld;
    // memory signals
    wire [5:0]                    int_code_lengths_address0;
    wire                          int_code_lengths_ce0;
    wire                          int_code_lengths_we0;
    wire [3:0]                    int_code_lengths_be0;
    wire [31:0]                   int_code_lengths_d0;
    wire [31:0]                   int_code_lengths_q0;
    wire [5:0]                    int_code_lengths_address1;
    wire                          int_code_lengths_ce1;
    wire                          int_code_lengths_we1;
    wire [3:0]                    int_code_lengths_be1;
    wire [31:0]                   int_code_lengths_d1;
    wire [31:0]                   int_code_lengths_q1;
    reg                           int_code_lengths_read;
    reg                           int_code_lengths_write;
    reg  [1:0]                    int_code_lengths_shift;
    wire [14:0]                   int_compressed_address0;
    wire                          int_compressed_ce0;
    wire                          int_compressed_we0;
    wire [3:0]                    int_compressed_be0;
    wire [31:0]                   int_compressed_d0;
    wire [31:0]                   int_compressed_q0;
    wire [14:0]                   int_compressed_address1;
    wire                          int_compressed_ce1;
    wire                          int_compressed_we1;
    wire [3:0]                    int_compressed_be1;
    wire [31:0]                   int_compressed_d1;
    wire [31:0]                   int_compressed_q1;
    reg                           int_compressed_read;
    reg                           int_compressed_write;
    reg  [1:0]                    int_compressed_shift;
    wire [15:0]                   int_decompressed_address0;
    wire                          int_decompressed_ce0;
    wire                          int_decompressed_we0;
    wire [3:0]                    int_decompressed_be0;
    wire [31:0]                   int_decompressed_d0;
    wire [31:0]                   int_decompressed_q0;
    wire [15:0]                   int_decompressed_address1;
    wire                          int_decompressed_ce1;
    wire                          int_decompressed_we1;
    wire [3:0]                    int_decompressed_be1;
    wire [31:0]                   int_decompressed_d1;
    wire [31:0]                   int_decompressed_q1;
    reg                           int_decompressed_read;
    reg                           int_decompressed_write;
    reg  [1:0]                    int_decompressed_shift;

//------------------------Instantiation------------------
// int_code_lengths
huffman_AXILiteS_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 64 )
) int_code_lengths (
    .clk0     ( ACLK ),
    .address0 ( int_code_lengths_address0 ),
    .ce0      ( int_code_lengths_ce0 ),
    .we0      ( int_code_lengths_we0 ),
    .be0      ( int_code_lengths_be0 ),
    .d0       ( int_code_lengths_d0 ),
    .q0       ( int_code_lengths_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_code_lengths_address1 ),
    .ce1      ( int_code_lengths_ce1 ),
    .we1      ( int_code_lengths_we1 ),
    .be1      ( int_code_lengths_be1 ),
    .d1       ( int_code_lengths_d1 ),
    .q1       ( int_code_lengths_q1 )
);
// int_compressed
huffman_AXILiteS_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 25000 )
) int_compressed (
    .clk0     ( ACLK ),
    .address0 ( int_compressed_address0 ),
    .ce0      ( int_compressed_ce0 ),
    .we0      ( int_compressed_we0 ),
    .be0      ( int_compressed_be0 ),
    .d0       ( int_compressed_d0 ),
    .q0       ( int_compressed_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_compressed_address1 ),
    .ce1      ( int_compressed_ce1 ),
    .we1      ( int_compressed_we1 ),
    .be1      ( int_compressed_be1 ),
    .d1       ( int_compressed_d1 ),
    .q1       ( int_compressed_q1 )
);
// int_decompressed
huffman_AXILiteS_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 37500 )
) int_decompressed (
    .clk0     ( ACLK ),
    .address0 ( int_decompressed_address0 ),
    .ce0      ( int_decompressed_ce0 ),
    .we0      ( int_decompressed_we0 ),
    .be0      ( int_decompressed_be0 ),
    .d0       ( int_decompressed_d0 ),
    .q0       ( int_decompressed_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_decompressed_address1 ),
    .ce1      ( int_decompressed_ce1 ),
    .we1      ( int_decompressed_we1 ),
    .be1      ( int_decompressed_be1 ),
    .d1       ( int_decompressed_d1 ),
    .q1       ( int_decompressed_q1 )
);

//------------------------AXI write fsm------------------
assign AWREADY = (wstate == WRIDLE);
assign WREADY  = (wstate == WRDATA);
assign BRESP   = 2'b00;  // OKAY
assign BVALID  = (wstate == WRRESP);
assign wmask   = { {8{WSTRB[3]}}, {8{WSTRB[2]}}, {8{WSTRB[1]}}, {8{WSTRB[0]}} };
assign aw_hs   = AWVALID & AWREADY;
assign w_hs    = WVALID & WREADY;

// wstate
always @(posedge ACLK) begin
    if (ARESET)
        wstate <= WRIDLE;
    else if (ACLK_EN)
        wstate <= wnext;
end

// wnext
always @(*) begin
    case (wstate)
        WRIDLE:
            if (AWVALID)
                wnext = WRDATA;
            else
                wnext = WRIDLE;
        WRDATA:
            if (WVALID)
                wnext = WRRESP;
            else
                wnext = WRDATA;
        WRRESP:
            if (BREADY)
                wnext = WRIDLE;
            else
                wnext = WRRESP;
        default:
            wnext = WRIDLE;
    endcase
end

// waddr
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (aw_hs)
            waddr <= AWADDR[ADDR_BITS-1:0];
    end
end

//------------------------AXI read fsm-------------------
assign ARREADY = (rstate == RDIDLE);
assign RDATA   = rdata;
assign RRESP   = 2'b00;  // OKAY
assign RVALID  = (rstate == RDDATA) & !int_code_lengths_read & !int_compressed_read & !int_decompressed_read;
assign ar_hs   = ARVALID & ARREADY;
assign raddr   = ARADDR[ADDR_BITS-1:0];

// rstate
always @(posedge ACLK) begin
    if (ARESET)
        rstate <= RDIDLE;
    else if (ACLK_EN)
        rstate <= rnext;
end

// rnext
always @(*) begin
    case (rstate)
        RDIDLE:
            if (ARVALID)
                rnext = RDDATA;
            else
                rnext = RDIDLE;
        RDDATA:
            if (RREADY & RVALID)
                rnext = RDIDLE;
            else
                rnext = RDDATA;
        default:
            rnext = RDIDLE;
    endcase
end

// rdata
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs) begin
            rdata <= 1'b0;
            case (raddr)
                ADDR_AP_CTRL: begin
                    rdata[0] <= int_ap_start;
                    rdata[1] <= int_ap_done;
                    rdata[2] <= int_ap_idle;
                    rdata[3] <= int_ap_ready;
                    rdata[7] <= int_auto_restart;
                end
                ADDR_GIE: begin
                    rdata <= int_gie;
                end
                ADDR_IER: begin
                    rdata <= int_ier;
                end
                ADDR_ISR: begin
                    rdata <= int_isr;
                end
                ADDR_C_SIZE_DATA_0: begin
                    rdata <= int_c_size[31:0];
                end
                ADDR_D_SIZE_DATA_0: begin
                    rdata <= int_d_size[31:0];
                end
                ADDR_D_SIZE_CTRL: begin
                    rdata[0] <= int_d_size_ap_vld;
                end
            endcase
        end
        else if (int_code_lengths_read) begin
            rdata <= int_code_lengths_q1;
        end
        else if (int_compressed_read) begin
            rdata <= int_compressed_q1;
        end
        else if (int_decompressed_read) begin
            rdata <= int_decompressed_q1;
        end
    end
end


//------------------------Register logic-----------------
assign interrupt    = int_gie & (|int_isr);
assign ap_start     = int_ap_start;
assign int_ap_idle  = ap_idle;
assign int_ap_ready = ap_ready;
assign c_size       = int_c_size;
// int_ap_start
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_start <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0] && WDATA[0])
            int_ap_start <= 1'b1;
        else if (int_ap_ready)
            int_ap_start <= int_auto_restart; // clear on handshake/auto restart
    end
end

// int_ap_done
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_done <= 1'b0;
    else if (ACLK_EN) begin
        if (ap_done)
            int_ap_done <= 1'b1;
        else if (ar_hs && raddr == ADDR_AP_CTRL)
            int_ap_done <= 1'b0; // clear on read
    end
end

// int_auto_restart
always @(posedge ACLK) begin
    if (ARESET)
        int_auto_restart <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0])
            int_auto_restart <=  WDATA[7];
    end
end

// int_gie
always @(posedge ACLK) begin
    if (ARESET)
        int_gie <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_GIE && WSTRB[0])
            int_gie <= WDATA[0];
    end
end

// int_ier
always @(posedge ACLK) begin
    if (ARESET)
        int_ier <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_IER && WSTRB[0])
            int_ier <= WDATA[1:0];
    end
end

// int_isr[0]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[0] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[0] & ap_done)
            int_isr[0] <= 1'b1;
        else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
            int_isr[0] <= int_isr[0] ^ WDATA[0]; // toggle on write
    end
end

// int_isr[1]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[1] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[1] & ap_ready)
            int_isr[1] <= 1'b1;
        else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
            int_isr[1] <= int_isr[1] ^ WDATA[1]; // toggle on write
    end
end

// int_c_size[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_c_size[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_C_SIZE_DATA_0)
            int_c_size[31:0] <= (WDATA[31:0] & wmask) | (int_c_size[31:0] & ~wmask);
    end
end

// int_d_size
always @(posedge ACLK) begin
    if (ARESET)
        int_d_size <= 0;
    else if (ACLK_EN) begin
        if (d_size_ap_vld)
            int_d_size <= d_size;
    end
end

// int_d_size_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_d_size_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (d_size_ap_vld)
            int_d_size_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_D_SIZE_CTRL)
            int_d_size_ap_vld <= 1'b0; // clear on read
    end
end


//------------------------Memory logic-------------------
// code_lengths
assign int_code_lengths_address0 = code_lengths_address0 >> 2;
assign int_code_lengths_ce0      = code_lengths_ce0;
assign int_code_lengths_we0      = code_lengths_we0;
assign int_code_lengths_be0      = 1 << code_lengths_address0[1:0];
assign int_code_lengths_d0       = {4{code_lengths_d0}};
assign code_lengths_q0           = int_code_lengths_q0 >> (int_code_lengths_shift * 8);
assign int_code_lengths_address1 = ar_hs? raddr[7:2] : waddr[7:2];
assign int_code_lengths_ce1      = ar_hs | (int_code_lengths_write & WVALID);
assign int_code_lengths_we1      = int_code_lengths_write & WVALID;
assign int_code_lengths_be1      = WSTRB;
assign int_code_lengths_d1       = WDATA;
// compressed
assign int_compressed_address0   = compressed_address0 >> 2;
assign int_compressed_ce0        = compressed_ce0;
assign int_compressed_we0        = 1'b0;
assign int_compressed_be0        = 1'b0;
assign int_compressed_d0         = 1'b0;
assign compressed_q0             = int_compressed_q0 >> (int_compressed_shift * 8);
assign int_compressed_address1   = ar_hs? raddr[16:2] : waddr[16:2];
assign int_compressed_ce1        = ar_hs | (int_compressed_write & WVALID);
assign int_compressed_we1        = int_compressed_write & WVALID;
assign int_compressed_be1        = WSTRB;
assign int_compressed_d1         = WDATA;
// decompressed
assign int_decompressed_address0 = decompressed_address0 >> 2;
assign int_decompressed_ce0      = decompressed_ce0;
assign int_decompressed_we0      = decompressed_we0;
assign int_decompressed_be0      = 1 << decompressed_address0[1:0];
assign int_decompressed_d0       = {4{decompressed_d0}};
assign int_decompressed_address1 = ar_hs? raddr[17:2] : waddr[17:2];
assign int_decompressed_ce1      = ar_hs | (int_decompressed_write & WVALID);
assign int_decompressed_we1      = int_decompressed_write & WVALID;
assign int_decompressed_be1      = WSTRB;
assign int_decompressed_d1       = WDATA;
// int_code_lengths_read
always @(posedge ACLK) begin
    if (ARESET)
        int_code_lengths_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_CODE_LENGTHS_BASE && raddr <= ADDR_CODE_LENGTHS_HIGH)
            int_code_lengths_read <= 1'b1;
        else
            int_code_lengths_read <= 1'b0;
    end
end

// int_code_lengths_write
always @(posedge ACLK) begin
    if (ARESET)
        int_code_lengths_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_CODE_LENGTHS_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_CODE_LENGTHS_HIGH)
            int_code_lengths_write <= 1'b1;
        else if (WVALID)
            int_code_lengths_write <= 1'b0;
    end
end

// int_code_lengths_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (code_lengths_ce0)
            int_code_lengths_shift <= code_lengths_address0[1:0];
    end
end

// int_compressed_read
always @(posedge ACLK) begin
    if (ARESET)
        int_compressed_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_COMPRESSED_BASE && raddr <= ADDR_COMPRESSED_HIGH)
            int_compressed_read <= 1'b1;
        else
            int_compressed_read <= 1'b0;
    end
end

// int_compressed_write
always @(posedge ACLK) begin
    if (ARESET)
        int_compressed_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_COMPRESSED_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_COMPRESSED_HIGH)
            int_compressed_write <= 1'b1;
        else if (WVALID)
            int_compressed_write <= 1'b0;
    end
end

// int_compressed_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (compressed_ce0)
            int_compressed_shift <= compressed_address0[1:0];
    end
end

// int_decompressed_read
always @(posedge ACLK) begin
    if (ARESET)
        int_decompressed_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_DECOMPRESSED_BASE && raddr <= ADDR_DECOMPRESSED_HIGH)
            int_decompressed_read <= 1'b1;
        else
            int_decompressed_read <= 1'b0;
    end
end

// int_decompressed_write
always @(posedge ACLK) begin
    if (ARESET)
        int_decompressed_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_DECOMPRESSED_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_DECOMPRESSED_HIGH)
            int_decompressed_write <= 1'b1;
        else if (WVALID)
            int_decompressed_write <= 1'b0;
    end
end

// int_decompressed_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (decompressed_ce0)
            int_decompressed_shift <= decompressed_address0[1:0];
    end
end


endmodule


`timescale 1ns/1ps

module huffman_AXILiteS_s_axi_ram
#(parameter
    BYTES  = 4,
    DEPTH  = 256,
    AWIDTH = log2(DEPTH)
) (
    input  wire               clk0,
    input  wire [AWIDTH-1:0]  address0,
    input  wire               ce0,
    input  wire               we0,
    input  wire [BYTES-1:0]   be0,
    input  wire [BYTES*8-1:0] d0,
    output reg  [BYTES*8-1:0] q0,
    input  wire               clk1,
    input  wire [AWIDTH-1:0]  address1,
    input  wire               ce1,
    input  wire               we1,
    input  wire [BYTES-1:0]   be1,
    input  wire [BYTES*8-1:0] d1,
    output reg  [BYTES*8-1:0] q1
);
//------------------------Local signal-------------------
reg  [BYTES*8-1:0] mem[0:DEPTH-1];
//------------------------Task and function--------------
function integer log2;
    input integer x;
    integer n, m;
begin
    n = 1;
    m = 2;
    while (m < x) begin
        n = n + 1;
        m = m * 2;
    end
    log2 = n;
end
endfunction
//------------------------Body---------------------------
// read port 0
always @(posedge clk0) begin
    if (ce0) q0 <= mem[address0];
end

// read port 1
always @(posedge clk1) begin
    if (ce1) q1 <= mem[address1];
end

genvar i;
generate
    for (i = 0; i < BYTES; i = i + 1) begin : gen_write
        // write port 0
        always @(posedge clk0) begin
            if (ce0 & we0 & be0[i]) begin
                mem[address0][8*i+7:8*i] <= d0[8*i+7:8*i];
            end
        end
        // write port 1
        always @(posedge clk1) begin
            if (ce1 & we1 & be1[i]) begin
                mem[address1][8*i+7:8*i] <= d1[8*i+7:8*i];
            end
        end
    end
endgenerate

endmodule

